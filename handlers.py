from aiogram.types import InputFile, InlineKeyboardButton, CallbackQuery, InlineKeyboardMarkup, InputMedia, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram import types

from random import choice

from loader import dp, bot, database
from forms import *

from texts import *
from config import *


async def check_subs(msg):
    # user_channel_status = await bot.get_chat_member(chat_id=-1001572670607, user_id=msg)
    # if user_channel_status['status'] == 'left':
    #     await bot.send_message(chat_id=msg,
    #                            text='‚ö†Ô∏è <b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –∫–∞–Ω–∞–ª!</b>\n\n<i>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!</i>',
    #                            reply_markup=InlineKeyboardMarkup().add(
    #                                InlineKeyboardButton(text='–ö–∞–Ω–∞–ª', url='https://t.me/ohmyenglishhh'),
    #                                InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_sub')),
    #                            parse_mode=types.ParseMode.HTML)
    #     return False
    # else:
    #     return True
    return True


async def prepare_msg(question):
    reply_markup = InlineKeyboardMarkup()
    if question == 'q21':
        text = '–í—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç!'
        reply_markup.add(InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', callback_data='results'))
    else:
        for k, i in enumerate(qst[question][0]):
            reply_markup.add(InlineKeyboardButton(text=i[:-1],
                                                  callback_data=f'{question}{i[-1]}'))
        text = qst[question][1]
    return {'markup': reply_markup, 'text': text}


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(msg: types.Message):
    user_id = msg.from_user.id
    response = await check_subs(msg=msg.from_user.id)
    print(response)
    if response:
        if len(database.select_value(table='users', keys='rowid, *', where=f"user_id = {user_id}")) == 0:
            database.add_value(table='users', values=f'{user_id}, 0')
        reply_markup = ReplyKeyboardMarkup(resize_keyboard=True)
        reply_markup.add(InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ'))
        await msg.answer(text=start_text, parse_mode=types.ParseMode.HTML, reply_markup=reply_markup)
        database.update_value(table='stats', key='clicks = clicks + 1', where='rowid = 1')
        database.update_value(table='stats', key='clicks_day = clicks_day + 1', where='rowid = 1')
        database.update_value(table='stats', key='clicks_week = clicks_week + 1', where='rowid = 1')
        database.update_value(table='stats', key='clicks_month = clicks_month + 1', where='rowid = 1')
        # data['clicks'] += 1
        # data['clicks_day'] += 1
        # data['clicks_week'] += 1
        # data['clicks_month'] += 1
        # write_json(file_path='stats.json', data=data)


@dp.message_handler(commands=["mailing"])
async def mail_users(msg: types.Message):
    if str(msg.from_user.id) in admins:
        await Form.message.set()
        await msg.reply("‚úèÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ!")


@dp.message_handler(commands=["stats"])
async def mail_users(msg: types.Message):

    clicks_all = database.select_value(table='stats', keys='*', where=f'rowid = 1')[0]
    clicks = clicks_all[0]
    clicks_day = clicks_all[1]
    clicks_week = clicks_all[2]
    days = clicks_all[3]
    users = len(database.select_value(table='users', keys='*', where=''))
    active_users = clicks_all[4]
    banned_users = clicks_all[5]

    if str(msg.from_user.id) in admins:
        await msg.reply(f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç—É:</b>\n\n"
                        f"<i>–í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:</i> <b>{clicks}</b>\n"
                        f"<i>–ü–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è:</i> <b>{clicks_day}</b>\n"
                        f"<i>–ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é:</i> <b>{clicks_week}</b>\n"
                        f"<i>–ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü:</i> <b>{clicks_week}</b>\n\n"
                        f"<i>–î–Ω–µ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:</i> <b>{days}</b>\n\n"
                        f"<i>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</i> <b>{users}</b>\n"
                        f"<i>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</i> <b>{active_users}</b>\n"
                        f"<i>–ú—ë—Ä—Ç–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</i> <b>{banned_users}</b>\n", parse_mode=types.ParseMode.HTML)
    print(msg.chat.id)
    print(msg.from_user.id)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=['text'])
async def message_handler(msg: types.Message):
    user_id = msg.from_user.id
    if msg.text == '–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ':
        database.update_value(table='users', key='count = 0', where=f'user_id = {user_id}')
        # users[str(msg.from_user.id)]['count'] = 0
        returns = await prepare_msg(question='q01')
        await msg.answer(text=test_text, parse_mode=types.ParseMode.HTML, reply_markup=types.ReplyKeyboardRemove())
        await msg.answer(text=returns['text'], parse_mode=types.ParseMode.HTML, reply_markup=returns['markup'])

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler()
async def query_handler(query: CallbackQuery):
    user_id = query.from_user.id
    global mail_button
    reply_markup = InlineKeyboardMarkup()
    reply_markup.add(InlineKeyboardButton(text='–ö–∞–Ω–∞–ª', url='https://t.me/ohmyenglishhh'))
    if query.data == 'results':
        # level = int(users[str(query.from_user.id)]["count"])
        level = database.select_value(table='users', keys='count', where=f'user_id = {user_id}')[0][0]
        if 0 <= level <= 4:
            text = '–ê1\n<i>–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º.</i>'
        elif 5 <= level <= 8:
            text = 'A2\n<i>–£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º —á—É—Ç—å –≤—ã—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ.</i>'
        elif 9 <= level <= 12:
            text = 'B1\n<i>–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º.</i>'
        elif 13 <= level <= 16:
            text = 'B2\n<i>–£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ.</i>'
        elif 17 <= level <= 18:
            text = 'C1\n<i>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º.</i>'
        else:
            text = '–°2\n<i>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º.</i>'
        await query.message.delete()
        await bot.send_message(chat_id=query.from_user.id,
                               text=f'üìö –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{level} –∏–∑ 20</b>'
                                    f'\n\nüß† –£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏—è —è–∑—ã–∫–∞ - <b>{text}</b>', parse_mode=types.ParseMode.HTML)
        await bot.send_message(chat_id=query.from_user.id,
                               text='üìà <b>–î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–Ω–∞–Ω–∏—è —è–∑—ã–∫–∞ —Å–æ–≤–µ—Ç—É—é –≤–∞–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª!</b>',
                               reply_markup=reply_markup, parse_mode=types.ParseMode.HTML)

    elif query.data == 'check_sub':
        response = await check_subs(msg=query.from_user.id)
        if response:
            if len(database.select_value(table='users', keys='rowid, *', where=f"user_id = {user_id}")) == 0:
                database.add_value(table='users', values=f'{user_id}, 0')
            reply_markup = ReplyKeyboardMarkup(resize_keyboard=True)
            reply_markup.add(InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ'))
            await bot.send_message(chat_id=query.from_user.id, text=start_text, parse_mode=types.ParseMode.HTML, reply_markup=reply_markup)
            await query.message.delete()

    elif query.data == 'send_mailing':
        users = [i[0] for i in database.select_value(table='users', keys='*')]
        print(users)
        active_users = 0
        banned_users = 0
        if mail_button == '':
            mail_button = InlineKeyboardMarkup()
        for i in users:
            print(i)
            try:
                if mail_type == 'text':
                    await bot.send_message(text=mail_text, chat_id=int(i), reply_markup=mail_button, parse_mode='HTML')
                elif mail_type == 'photo':
                    await bot.send_photo(caption=mail_text, photo=mail_photo, chat_id=int(i), reply_markup=mail_button,
                                         parse_mode='HTML')
                active_users += 1
            except Exception as exc:
                print(exc)
                banned_users += 1
                pass
        await bot.send_message(chat_id=query.from_user.id, text= f'–°–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑–æ—Å–ª–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º {active_users}!')
        database.update_value(table='stats', key=f'active_users = {active_users}', where='rowid = 1')
        database.update_value(table='stats', key=f'banned_users = {banned_users}', where='rowid = 1')

        await query.message.delete()


    elif query.data == 'cancel_mailing':
        await query.message.edit_text(text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')


    elif query.data == 'add_button':
        await Form.button.set()
        await bot.send_message(chat_id=query.from_user.id, text= f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n\n–ü—Ä–∏–º–µ—Ä: "–ø—Ä–∏–≤–µ—Ç @username"')


    elif query.data[0] == 'q':
        print('query-data', query.data)
        question = f'q{int(query.data[1:3]) + 1}' if int(query.data[1:3]) >= 9 else f'q0{int(query.data[1:3]) + 1}'
        print('question', question)
        returns = await prepare_msg(question=question)
        print('returns', returns)
        if query.data[-1] == 'f':
            text = f'{choice(false_answers)}' \
                   f'\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - {qst[query.data[:3]][2]}' \
                   f'\n\n{returns["text"]}'
        else:
            text = f'{choice(true_answers)}' \
                   f'\n\n{returns["text"]}'
            database.update_value(table='users', key='count = count + 1', where=f'user_id = {user_id}')
        await query.message.edit_text(text=text, parse_mode=types.ParseMode.HTML, reply_markup=returns['markup'])
    # elif int(query.data[0]) < 19:
    #     print(query.data)
    #     returns = await prepare_msg(question=f'q{int(query.data[:2]) + 1}' if int(query.data[:2]) >= 9 else f'q0{int(query.data[:2]) + 1}')
    #     print(returns)
    #     if query.data[-1] == 'f':
    #         text = f'{choice(false_answers)}' \
    #                f'\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - {query.data.split("-")[1]}' \
    #                f'\n\n{returns["text"]}'
    #     else:
    #         text = f'{choice(true_answers)}' \
    #                f'\n\n{returns["text"]}'
    #         users[str(query.from_user.id)]['count'] += 1
    #         write_json(file_path='data.json', data=users)
    #
    #     await query.message.edit_text(text=text, parse_mode=types.ParseMode.HTML, reply_markup=returns['markup'])
        # await bot.send_message(chat_id=query.from_user.id, text=text, parse_mode=types.ParseMode.HTML, reply_markup=returns['markup'])


@dp.message_handler(state='*', commands=['cancel'])
async def cancel_handler(msg: types.Message, state: FSMContext):

    current_state = await state.get_state()
    if current_state is None:
        # User is not in any state, ignoring
        return

    await state.finish()
    await bot.send_message(chat_id=msg.from_user.id, text='–û—Ç–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')


@dp.message_handler(state=Form.message, content_types=['photo', 'text'])
async def process_mailing(message: types.Message, state: FSMContext):
    global mail_text, reply_message, mail_photo, mail_type, mail_button
    """Process user name"""

    reply_markup = InlineKeyboardMarkup()
    reply_markup.row(*[InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='send_mailing'),
                                                InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_mailing')])
    reply_markup.row(*[InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É', callback_data='add_button')])


    await state.finish()
    await message.reply(f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    msg_type = message.content_type
    if msg_type == 'text':
        mail_type = message.content_type
        mail_text = message.text
        reply_message = await bot.send_message(message.from_user.id, message.text, reply_markup=reply_markup, parse_mode='HTML')
    elif msg_type == 'photo':
        mail_type = message.content_type
        document_id = message.photo[0].file_id
        info = await bot.get_file(document_id)
        mail_photo = info.file_id
        mail_text = message.caption
        reply_message = await bot.send_photo(chat_id=message.from_user.id, caption=message.caption, photo=mail_photo, reply_markup=reply_markup, parse_mode='HTML')


@dp.message_handler(state=Form.button, content_types=['text'])
async def button(message: types.Message, state: FSMContext):
    global mail_text, reply_message, mail_photo, mail_type, mail_button

    reply_markup = InlineKeyboardMarkup()
    reply_markup.row(*[InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='send_mailing'),
                       InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_mailing')])
    reply_markup.row(*[InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É', callback_data='add_button')])

    await state.finish()
    await message.reply(f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=reply_markup)

    button_text = ' '.join(message.text.split()[:-1])
    url = message.text.split()[-1]
    if url[0] == '@':
        url = 'https://t.me/' + url[1:]
    mail_button = InlineKeyboardMarkup()
    mail_button.add(InlineKeyboardButton(text=button_text, url=url))

    print(button_text)
    print(url)
    print(mail_button)

    msg_type = message.content_type
    if msg_type == 'text':
        reply_message = await bot.send_message(message.from_user.id, mail_text, reply_markup=mail_button,
                                               parse_mode='HTML')
    elif msg_type == 'photo':
        reply_message = await bot.send_photo(chat_id=message.from_user.id, caption=mail_text, photo=mail_photo,
                                             reply_markup=mail_button, parse_mode='HTML')
